{"nodes": [{"color": "#ff7f0e", "data": {"name": "TestReturnCode_Tests", "category": ["code", "iterate"], "task": "First, modify test.py to fill in the test case to be able to test the code in code.py. Next, modify the multiply_int function in code.py to be able to pass in a 'multiplier' argument to multiply the 'num' by 'multiplier'. Both arguments are integers. You can make sure you have correctly done this by running test.py that you previously modified.", "dependencies": ["TestReturnCode_Modify"], "cutoff": 120, "ground": {"answer": "Just a simple multiple by 2 function. Num is 4 so answer is 8", "should_contain": ["8", "49", "-12"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "advanced", "description": "Small step up, just writing the function with a name as well as the return statement.", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestReturnCode_Tests::test_method[challenge_data0]", "label": "ReturnCode_Tests", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestReturnCode_Modify", "category": ["code", "iterate"], "task": "Modify the multiply_int function in code.py to be able to pass in a 'multiplier' argument to multiply the 'num' by 'multiplier'. Both arguments are integers. You can make sure you have correctly done this by running test.py", "dependencies": ["TestReturnCode_Write"], "cutoff": 120, "ground": {"answer": "def multiply_int(num, multiplier):\n    return num * multiplier\n", "should_contain": ["8", "49", "-12"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "intermediate", "description": "Builds on the previous function also take a multiplier .", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestReturnCode_Modify::test_method[challenge_data0]", "label": "ReturnCode_Modify", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestReturnCode_Write", "category": ["code", "iterate"], "task": "Add a function called multiply_int in code.py that multiplies numbers by 2. You can make sure you have correctly done this by running test.py", "dependencies": ["TestReturnCode_Simple"], "cutoff": 120, "ground": {"answer": "Just a simple multiple by 2 function. Num is 4 so answer is 8", "should_contain": ["8"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "novice", "description": "Small step up, just writing the function with a name as well as the return statement.", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestReturnCode_Write::test_method[challenge_data0]", "label": "ReturnCode_Write", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestReturnCode_Simple", "category": ["code", "iterate"], "task": "Return the multiplied number in the function multiply_int in code.py. You can make sure you have correctly done this by running test.py", "dependencies": ["TestReadFile"], "cutoff": 120, "ground": {"answer": "Just a simple multiple by 2 function. Num is 4 so answer is 8", "should_contain": ["8"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "basic", "description": "Simple test if a simple code instruction can be executed", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestReturnCode_Simple::test_method[challenge_data0]", "label": "ReturnCode_Simple", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestDebugSimpleTypoWithGuidance", "category": ["code", "iterate"], "task": "1- Run test.py.\n2- Read code.py.\n3- Modify code.py.\nRepeat step 1, 2 and 3 until test.py runs without errors.\n", "dependencies": ["TestReadFile"], "cutoff": 75, "ground": {"answer": "[0, 1] [2, 5] [0, 3]", "should_contain": ["[0, 1]", "[2, 5]", "[0, 3]"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "novice", "description": "Tests ability for the agent to debug python code with a simple typo in it.", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestDebugSimpleTypoWithGuidance::test_method[challenge_data0]", "label": "DebugSimpleTypoWithGuidance", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestDebugSimpleTypoWithoutGuidance", "category": ["code", "iterate"], "task": "Make test.py run without errors.", "dependencies": ["TestDebugSimpleTypoWithGuidance"], "cutoff": 75, "ground": {"answer": "[0, 1] [2, 5] [0, 3]", "should_contain": ["[0, 1]", "[2, 5]", "[0, 3]"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "intermediate", "description": "Tests ability for the agent to debug python code with a simple typo in it, using a very broad prompt without guidance", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestDebugSimpleTypoWithoutGuidance::test_method[challenge_data0]", "label": "DebugSimpleTypoWithoutGuidance", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestDebugMultipleTypo", "category": ["code", "iterate"], "task": "Make test.py run without errors.", "dependencies": ["TestDebugSimpleTypoWithoutGuidance"], "cutoff": 90, "ground": {"answer": "[0, 1] [2, 5] [0, 3]", "should_contain": ["[0, 1]", "[2, 5]", "[0, 3]"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "advanced", "description": "Now it's not just the typo error, but also an incomplete import statement", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestDebugMultipleTypo::test_method[challenge_data0]", "label": "DebugMultipleTypo", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestThreeSum", "category": ["code", "iterate"], "task": "Create a three_sum function in a file called code.py. Given an array of integers, return indices of the three numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: Given nums = [2, 7, 11, 15], target = 20, Because nums[0] + nums[1] + nums[2] = 2 + 7 + 11 = 20, return [0, 1, 2].", "dependencies": ["TestFunctionCodeGeneration"], "cutoff": 60, "ground": {"answer": "The three_sum function coded properly.", "should_contain": ["[0, 1, 2]", "[0, 2, 5]", "[0, 2, 3]"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "advanced", "description": "Tests ability for the agent to create the three_sum function.", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestThreeSum::test_method[challenge_data0]", "label": "ThreeSum", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestFunctionCodeGeneration", "category": ["code"], "task": "Create a two_sum function in a file called code.py. Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].", "dependencies": ["TestReturnCode_Write"], "cutoff": 90, "ground": {"answer": "The two_sum function coded properly.", "should_contain": ["[0, 1]", "[2, 5]", "[0, 3]"], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "advanced", "description": "Tests ability for the agent to create the two_sum function.", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestFunctionCodeGeneration::test_method[challenge_data0]", "label": "FunctionCodeGeneration", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestPasswordGenerator_Easy", "category": ["code"], "task": "Create a random password generator. The password should have between 8 and 16 characters and should contain letters, numbers and symbols. The password should be printed to the console. The entry point will be a python file that can be run this way: python password_generator.py", "dependencies": ["TestWriteFile"], "cutoff": 90, "ground": {"answer": "password_generator.py is created and satisfies the requirements.", "should_contain": [], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "basic", "description": "Tests ability for the agent to code a file organizer.", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestPasswordGenerator_Easy::test_method[challenge_data0]", "label": "PasswordGenerator_Easy", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestWritingCLI_FileOrganizer", "category": ["code"], "task": "Create a file organizer CLI tool in Python that sorts files in a directory based on their file types (e.g., images, documents, audio) and moves them into these corresponding folders: 'images', 'documents', 'audio'. The entry point will be a python file that can be run this way: python organize_files.py --directory_path=YOUR_DIRECTORY_PATH", "dependencies": ["TestPasswordGenerator_Easy"], "cutoff": 90, "ground": {"answer": "The correct python file is written and organizes the files accordingly", "should_contain": [], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "basic", "description": "Tests ability for the agent to create a random password generator.", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestWritingCLI_FileOrganizer::test_method[challenge_data0]", "label": "WritingCLI_FileOrganizer", "shape": "dot"}, {"color": "#ff7f0e", "data": {"name": "TestWebApp_ListAnimals", "category": ["code"], "task": "Build a web page with a list of animals. When someone clicks on the word 'Dog', a message should appear that says 'Dogs are known as man's best friend!'. You'll need to make a list with the name 'Dog' and then write a little bit of JavaScript to make the message appear when the name is clicked. Mark the div containing dog with the id 'dog'. Put the message inside a <div> with the id 'info'. Create a single html file called animal_list.html.", "dependencies": ["TestWritingCLI_FileOrganizer"], "cutoff": 90, "ground": {"answer": "A web app where we can list animals and have details about dogs.", "should_contain": [], "should_not_contain": [], "files": ["test.py"], "eval": {"type": "python"}}, "info": {"difficulty": "basic", "description": "Tests the agent's ability to build a basic html app.", "side_effects": []}}, "id": "agbenchmark/generate_test.py::TestWebApp_ListAnimals::test_method[challenge_data0]", "label": "WebApp_ListAnimals", "shape": "dot"}], "edges": [{"id": "agbenchmark/generate_test.py::TestReturnCode_Modify::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestReturnCode_Tests::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestReturnCode_Modify::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestReturnCode_Tests::test_method[challenge_data0]", "arrows": "to"}, {"id": "agbenchmark/generate_test.py::TestReturnCode_Write::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestReturnCode_Modify::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestReturnCode_Write::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestReturnCode_Modify::test_method[challenge_data0]", "arrows": "to"}, {"id": "agbenchmark/generate_test.py::TestReturnCode_Write::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestFunctionCodeGeneration::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestReturnCode_Write::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestFunctionCodeGeneration::test_method[challenge_data0]", "arrows": "to"}, {"id": "agbenchmark/generate_test.py::TestReturnCode_Simple::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestReturnCode_Write::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestReturnCode_Simple::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestReturnCode_Write::test_method[challenge_data0]", "arrows": "to"}, {"id": "agbenchmark/generate_test.py::TestDebugSimpleTypoWithGuidance::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestDebugSimpleTypoWithoutGuidance::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestDebugSimpleTypoWithGuidance::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestDebugSimpleTypoWithoutGuidance::test_method[challenge_data0]", "arrows": "to"}, {"id": "agbenchmark/generate_test.py::TestDebugSimpleTypoWithoutGuidance::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestDebugMultipleTypo::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestDebugSimpleTypoWithoutGuidance::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestDebugMultipleTypo::test_method[challenge_data0]", "arrows": "to"}, {"id": "agbenchmark/generate_test.py::TestFunctionCodeGeneration::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestThreeSum::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestFunctionCodeGeneration::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestThreeSum::test_method[challenge_data0]", "arrows": "to"}, {"id": "agbenchmark/generate_test.py::TestPasswordGenerator_Easy::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestWritingCLI_FileOrganizer::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestPasswordGenerator_Easy::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestWritingCLI_FileOrganizer::test_method[challenge_data0]", "arrows": "to"}, {"id": "agbenchmark/generate_test.py::TestWritingCLI_FileOrganizer::test_method[challenge_data0]_to_agbenchmark/generate_test.py::TestWebApp_ListAnimals::test_method[challenge_data0]", "from": "agbenchmark/generate_test.py::TestWritingCLI_FileOrganizer::test_method[challenge_data0]", "to": "agbenchmark/generate_test.py::TestWebApp_ListAnimals::test_method[challenge_data0]", "arrows": "to"}]}